<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://github.com/adempiere/adempiere-site.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Página Oficial de ADempiere</title>
    <link>https://github.com/adempiere/adempiere-site.github.io/es/</link>
    <description>Página oficial de la comunidad de ADempiere</description>
    <language>es-ES</language>
    <pubDate>Fri, 26 Aug 2022 17:51:49 GMT</pubDate>
    <lastBuildDate>Fri, 26 Aug 2022 17:51:49 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Articulos</category>
    <category>Foundation</category>
    <item>
      <title>The Future Of ADempiere as a DDD reactive system</title>
      <link>https://github.com/adempiere/adempiere-site.github.io/es/about/articles/2015-06-22-the-future-of-adempiere-as-a-ddd-reactive-system.html</link>
      <guid>https://github.com/adempiere/adempiere-site.github.io/es/about/articles/2015-06-22-the-future-of-adempiere-as-a-ddd-reactive-system.html</guid>
      <source url="https://github.com/adempiere/adempiere-site.github.io/rss.xml">The Future Of ADempiere as a DDD reactive system</source>
      <category>Articulos</category>
      <pubDate>Mon, 22 Jun 2015 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Antes de empezar a hablar de modularidad, me gustaría describir el camino para definir la arquitectura más adecuada para un software como ADempiere.</p>
<p>Durante los últimos años he estado leyendo y analizando los diferentes enfoques y arquitecturas para el desarrollo de software y al mismo tiempo descifrar cuál sería la mejor para ADempiere.</p>
<p>Como todos sabemos muy bien, el diseño de nuestro programa se basa en una combinación de dos capas <a href="http://en.wikipedia.org/wiki/Cliente" target="_blank" rel="noopener noreferrer">Cliente/servido</a> (1) Swing, que en los años noventa del el siglo pasado fue uno de los que mejor se adoptó porque utilizó la red y las PC de manera que el servidor principal se liberó de la carga pesada al dejar ciertas tareas en el cliente. El objetivo principal era que el núcleo del software se ejecutara en un servidor central mientras los clientes se conectaban a él para acceder a los datos y realizar la lógica comercial localmente.</p>
<p>Irónicamente, creo que han regresado a donde comenzaron originalmente, ya que había un mainframe con terminales tontas que solo mostraban datos a los usuarios sin ningún tipo de procesamiento de datos complejo.</p>
<p>No estuve presente en la época en que se necesitaba una bata blanca para acceder a grandes centros de datos formados por varios IBM 390 o Systems 36 con cientos de terminales (ATM). Pero hoy, el contexto es de alguna manera similar a estos tiempos pasados: hay grandes centros de datos -que por cierto han ayudado a reducir costos- con servidores alquilados a los que se accede de manera virtual por un par de cientos de dólares al mes (Amazon, Google Cloud, Heroku, por nombrar algunos). La principal diferencia ahora es que las aplicaciones tienen que dar servicio a miles o incluso millones de usuarios, la capacidad de poder escalar horizontalmente es un requisito habitual hoy en día; este nuevo contexto exige que las aplicaciones se diseñen de manera diferente ya que los requisitos son totalmente diferentes.</p>
<p>El acceso a estos servidores se realiza mediante gadgets que, aunque no son totalmente tontos, ejecutan aplicaciones cliente que se ejecutan en un navegador web cuya única tarea es interpretar java script o código HTML, donde el valor más alto es la estandarización e integración de múltiples sistemas operativos y plataformas. .</p>
<p>En la próxima década, el enfoque principal fue el desarrollo de aplicaciones basadas en el paradigma del controlador de vista modelo [MVC] (http://en.wikipedia.org/wiki/Model) (2), que permitía la separación de código.</p>
<p>La capa del modelo permite el acceso y actualización de datos, en su mayoría guardados en una base de datos relacional. Por otro lado, permite trabajar con mapeo objeto-relacional (ORM) que consiste en una abstracción en la base de datos y persistencia, reemplazando el uso de sentencias SQL dependiendo de la implementación de un motor implementado en cada base de datos.
La capa de vista separa el código para la visualización y la interacción del usuario a través de una interfaz de usuario, que se implementa de acuerdo con el dispositivo de acceso.</p>
<p>La capa de controlador se encarga de vincular la capa de vista con el modelo de datos e implementa el código que responde a las acciones necesarias.</p>
<p>Cuando analizamos el código de ADempiere en retrospectiva, podemos ver el transcurso del tiempo y la evolución que sufrió. Se pasó del cliente/servidor original basado en Java swing con acceso directo a la base de datos a través de sentencias SQL puras al actual ORM propio combinado con SQL para acceder a los datos y la aplicación MVC basada en el cliente web AJAX.</p>
<p>Aunque la tecnología ha avanzado, nuestro modelo de dominio ha persistido; por eso podemos inferir que el activo más importante de ADempiere es el Diccionario de Aplicaciones que preserva el modelo de dominio y la lógica de negocio.</p>
<p>Gracias a que ADempiere fue redactado y desarrollado sobre una Arquitectura Dirigida por Modelos <a href="http://en.wikipedia.org/wiki/Model-driven_architecture" target="_blank" rel="noopener noreferrer">MDA</a> (3), el modelo de dominio está protegido de obsolescencia por el Diccionario de Aplicaciones</p>
<p>Como persona voluntaria, responsable de la futura arquitectura de la querida ADempiere, adoptaremos el enfoque DDD como línea principal de desarrollo.</p>
<p><strong>Ahora: ¿qué es un desarrollo de software guiado por el <a href="http://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD de Diseño Impulsado por Dominio</a>(4)?</strong></p>
<p><strong>DDD</strong> es un enfoque para desarrollar software con requisitos complejos y que tiene un vínculo profundo con un modelo que define el núcleo de la lógica comercial que se está desarrollando.
Los mandamientos más importantes para desarrollar y mantener un modelo de dominio son:</p>
<ul>
<li>Situar el foco principal del proyecto en el core y la lógica de negocio del dominio.</li>
<li>Todos los diseños complejos se basan en un modelo de dominio.</li>
<li>Iniciar una colaboración creativa entre técnicos y expertos en modelos de dominio para definir iterativamente un modelo que aborde los problemas particulares del dominio.</li>
</ul>
<p>El <a href="http://domainlanguage.com/ddd/patterns/DDD_Reference_2011-01-31.pdf" target="_blank" rel="noopener noreferrer">Domain Driven Design</a> (5) no es una tecnología ni una metodología. Es un conjunto de patrones para la construcción de aplicaciones comerciales a partir del modelo de dominio, que proporciona una estructura útil, práctica y con una terminología consistente para la toma de decisiones en el curso del diseño de software.</p>
<p><strong>Dominio:</strong> una esfera de conocimiento (ontología), influencia o actividad. El área donde un usuario aplica un programa es el dominio del software.
<strong>Modelo:</strong> un conjunto de abstracciones que describen secciones de un dominio seleccionado que se pueden usar para resolver problemas o tareas relacionadas con ese dominio.
<strong>Lenguaje ubicuo:</strong> un lenguaje estructurado en el contexto de un modelo de dominio y utilizado por todos los miembros del equipo para interconectar todas las actividades del equipo.
<strong>Contexto:</strong> el escenario en el que una palabra o declaración define su significado.
Una visión puramente técnica para el desarrollo de software podría ser la migración a una aplicación de múltiples capas (capa de persistencia, capa de datos de acceso, capa de servicio y capa de presentación).
<strong>DDD</strong> no está en conflicto con ninguna tecnología o patrón de diseño, por ejemplo [Inyección de dependencia DI] (http://en.wikipedia.org/wiki/Dependency_injection) (6),</p>
<p>pero sin cambios hay una premisa muy importante ¡El modelo de dominio debe permanecer aislado de las capas externas! ya que cualquier cambio tecnológico no debería afectar mi core business.</p>
<p><strong>Premisa importante:</strong></p>
<ul>
<li>¡El modelo debe mantenerse aislado de las capas externas! La razón: ningún cambio tecnológico debe afectar al núcleo del negocio.</li>
<li>Cada capa es un círculo concéntrico que define un área de software; mientras se mueve desde el centro hacia los niveles exteriores, el software evoluciona. Los círculos exteriores son mecanismos, mientras que los círculos interiores son las condiciones.</li>
<li>La regla más importante para esta arquitectura es la regla de dependencia.</li>
<li>Como regla general, las dependencias dentro del código fuente solo pueden apuntar hacia el centro. Nada en un círculo interior puede saber nada en un círculo exterior. Además, cualquier nombre declarado en un círculo exterior no puede ser mencionado por el código de un círculo interior. Esto incluye llamadas a funciones, clases, variables o cualquier otra entidad de software.</li>
<li>Por la misma razón, los formatos de datos utilizados en un círculo exterior no pueden ser utilizados por un círculo interior, especialmente si estos formatos se generan en un ORM desde un círculo exterior. Nuestra intención es que nada de un círculo exterior afecte a los círculos interiores.</li>
<li>Así, para la interacción entre círculos o capas es primordial establecer una API que permita la comunicación entre capas internas y externas mediante adaptadores o mensajes.</li>
</ul>
<p>Hay algunas arquitecturas basadas en esta vista; son similares y difieren en algunos puntos, pero coinciden en la importancia de un modelo de dominio <a href="http://alistair.cockburn.us/Hexagonal+architecture" target="_blank" rel="noopener noreferrer">Arquitectura hexagonal</a> (7), [Arquitectura cebolla](http:// www.infoq.com/news/2014/10/ddd-onion-architecture) (8), [La arquitectura limpia] (http://blog.8thlight.com/uncle-bob/2012/08/13/the- arquitectura limpia.html) (9).</p>
<p>Como la forma de definir cómo construiremos el software alrededor de ADempiere es crucial, adoptaremos la arquitectura limpia/Onion, donde el enfoque principal es mantener limpio el modelo de dominio interactuando con las capas externas por medio de contratos (API o interfaces) que permiten separar convenientemente el modelo de dominio de las implementaciones (API o contrato). Esto permitirá una evolución ordenada evitando la obsolescencia tecnológica.</p>
<p>Por otro lado, definiremos un <a href="http://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">DSL de Lenguaje Específico de Dominio</a> (10) para ADempiere enfocado al negocio, que permita construir nuestro lenguaje ubicuo y delimitando claramente los contextos. Esto ayuda a un desarrollo más natural de la lógica empresarial.
Como se dijo antes, toda decisión tiene que ser autorizada por los beneficios a obtener; avanzar hacia DDD nos permitirá obtener los siguientes beneficios:</p>
<p><strong>Los beneficios:</strong></p>
<ul>
<li>Código desacoplado</li>
<li>Reducir el código de espagueti</li>
<li>Servicios transversales independientes del modelo de dominio (Log, Transacciones, Seguridad).</li>
<li>Código fácil de mantener</li>
<li>Software adaptable a cambios</li>
<li>Diseño basado en componentes</li>
<li>Contextos delimitados por el proceso de negocio</li>
<li>Construir nuestros propios conjuntos de prueba (funcional, integración, prueba de regresión)</li>
<li>Mejor manejo de dependencias y modularidad.</li>
<li>Crear un DSL (lenguaje específico del dominio) (9) para la empresa</li>
<li>Compilación de Adempiere como un sistema reactivo (11) (Responsive, Resilient, Elastic, Message Driver)</li>
<li>Una aplicación diseñada para las exigencias de hoy</li>
</ul>
<p>Es importante que los desarrolladores interesados ​​en participar en este gran proyecto se familiaricen con los conceptos y la terminología.</p>
<p>En los próximos meses y semanas seguiré escribiendo más artículos con ejemplos concretos que permitan la discusión.</p>
<p>Víctor Pérez
Un fundador de ADempiere
victor.perez@e-evolution.com</p>
<p>Referencias:</p>
<ul>
<li>(1) <a href="http://en.wikipedia.org/wiki/Client%E2%80%93server_model" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Client–server_model</a></li>
<li>(2) <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Model–view–controller</a></li>
<li>(3) <a href="http://en.wikipedia.org/wiki/Model-driven_architecture" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Model-driven_architecture</a></li>
<li>(4) <a href="http://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Domain-driven_design</a></li>
<li>(5) <a href="http://domainlanguage.com/ddd/patterns/DDD_Reference_2011-01-31.pdf" target="_blank" rel="noopener noreferrer">http://domainlanguage.com/ddd/patterns/DDD_Reference_2011-01-31.pdf</a></li>
<li>(6) <a href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Dependency_injection</a></li>
<li>(7) <a href="http://alistair.cockburn.us/Hexagonal+architecture" target="_blank" rel="noopener noreferrer">http://alistair.cockburn.us/Hexagonal+architecture</a></li>
<li>(8) <a href="http://www.infoq.com/news/2014/10/ddd-onion-architecture" target="_blank" rel="noopener noreferrer">http://www.infoq.com/news/2014/10/ddd-onion-architecture</a></li>
<li>(9) [http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html](http://blog.8thlight.com/uncle-bob/2012/ 13/08/la-arquitectura-limpia.html)</li>
<li>(10) <a href="http://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Domain-specific_language</a></li>
<li>(11) <a href="http://www.reactivemanifesto.org" target="_blank" rel="noopener noreferrer">http://www.reactivemanifesto.org</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Anuncio mundial del nuevo y mejorado portal de contenido de ADempiere</title>
      <link>https://github.com/adempiere/adempiere-site.github.io/es/about/articles/2015-08-06-world-announcement-for-adempiere.html</link>
      <guid>https://github.com/adempiere/adempiere-site.github.io/es/about/articles/2015-08-06-world-announcement-for-adempiere.html</guid>
      <source url="https://github.com/adempiere/adempiere-site.github.io/rss.xml">Anuncio mundial del nuevo y mejorado portal de contenido de ADempiere</source>
      <category>Articulos</category>
      <pubDate>Thu, 06 Aug 2015 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Nos complace anunciar el lanzamiento de un nuevo y mejorado portal de contenido para ADempiere alcanzando así otro hito tras el lanzamiento de la versión 380, lo que confirma la tracción y el compromiso de nuestra comunidad y de todos los que están detrás de este gran proyecto Bazaar.</p>
<p>Un grupo de personas comprometidas trabajó arduamente durante varios meses para crear un sitio profesional e informativo para nuestra solución comercial, un lugar donde las personas encontrarán toda la información necesaria para evaluar nuestras herramientas de gestión de procesos, rompiendo la dependencia de un proveedor de software en particular y evitando licencias altas. costos y, lo que es más importante, no requerir compromisos a largo plazo de terceros para instalarlo, ampliarlo y/o personalizarlo.</p>
<p>El portal ofrece una descripción general de la historia, la funcionalidad, las características, los beneficios y las historias de éxito de ADempiere, pero también permite descargar rápidamente un instalador, acceder rápidamente al código fuente, rastrear errores y explorar los foros para aprender de otras organizaciones que utilizan Adempiere en todo el mundo.</p>
<p>Se ha adoptado una nueva plataforma de publicación que permitirá un mantenimiento más efectivo y estar al día con la documentación del proyecto para las mejoras actuales y futuras de forma regular.</p>
<p>También nos hemos alejado del repositorio histórico de SourceForge a un sistema de control de versiones más profesional y seguro, por lo que todo el código y la plataforma de colaboración ADempiere se trasladaron a Git: www.github.com/Adempiere, que alberga cientos de proyectos de código abierto con miles de desarrolladores trabajando. de forma activa y colaborativa para el éxito de sus propios proyectos. También movimos la distribución de binarios a http://www.bintray.com/adempiere, que también sirve a muchos otros proyectos de código abierto de software profesional y libre de malware.</p>
<p>Comenzamos con una nueva herramienta para administrar y controlar los foros de discusión donde la comunidad administrará la información y el conocimiento, lo que le permitirá crear una base de conocimiento para el beneficio de todos los involucrados.
On the other hand we are in the process of migrating information from the old sourceforge forums to our platform to protect the knowledge generated by the 10-year project.</p>
<p>Hemos creado una sala de chat para que los desarrolladores colaboren en el desarrollo de futuras versiones dentro de http://gitter.im/adempiere. El canal es público y cualquier persona con una cuenta de github puede acceder y participar libremente.</p>
<p>Un punto adicional importante que vale la pena mencionar es que el portal es un lugar donde las partes interesadas pueden encontrar servicios de consultoría empresarial de expertos profesionales, socios certificados y experimentados que han implementado Adempiere con éxito a lo largo de los años.</p>
<p>Hemos creado un programa de certificación que permite a nuestros asociados calificar mediante casos documentados exitosamente garantizando la calidad y conocimiento de la solución.</p>
<p>Incorporar un plan de formación para formar consultores expertos en ADempiere que implementen las mejores prácticas empresariales en el proceso de venta, gestión de distribución, cadena de suministro, fabricación, control de producción, gestión financiera y capital humano.</p>
<p>Establecimos un proceso de contribución muy exitoso integrando las mejores características del negocio y validado en implementaciones exitosas, permitiendo a los clientes los beneficios que no se obtienen de los fabricantes de software propietario ya que este proyecto al ser liderado por la comunidad, los clientes dictan mejoras y funcionalidades para futuras versiones.</p>
<p>Para la versión 4 nos enfocaremos en la renovación tecnológica para competir con las demandas de hoy, creando una nueva UI para dispositivos móviles y el desarrollo de una nueva interfaz web con soporte para HTML5 responsive, en la próxima versión ADempiere soportará Java 8 conscientemente decidido esperar el lanzamiento de Java 9, en particular el proyecto Jigsaw que se convertirá en el estándar para la modularización de Java.</p>
<p>Queremos agradecer a todos los colaboradores que hicieron esta gran empresa, invito a todo aquel que quiera colaborar con este gran proyecto.</p>
<p>Sinceramente</p>
<p>Víctor Pérez Juárez</p>
<p>Fundador de ADempiere</p>
<p>En nombre de la Comunidad de ADempiere</p>
]]></content:encoded>
    </item>
    <item>
      <title>Berlin Conference 2009</title>
      <link>https://github.com/adempiere/adempiere-site.github.io/es/about/meeting/berlin-2009.html</link>
      <guid>https://github.com/adempiere/adempiere-site.github.io/es/about/meeting/berlin-2009.html</guid>
      <source url="https://github.com/adempiere/adempiere-site.github.io/rss.xml">Berlin Conference 2009</source>
      <category>Foundation</category>
      <pubDate>Sun, 21 Jun 2009 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_2nd-european-adempiere-conference-in-berlin" tabindex="-1"> 2nd. European ADempiere conference in Berlin</h2>
<p><strong>June 21st – 23rd 2009</strong></p>
<p>For the first time in May 2007, developers from all over the world, involved in the open-source project ADempiere, met up for the first European ADempiere conference at the FHTW in Berlin.</p>
<p>Though the project leader Red1 is of the opinion that the possibilities one has with the internet today are sufficient to connect team members and be successful on projectslike ADempiere, the internet still a virtual place with a virtual community.</p>
<p>With this first conference every member of the &quot;ADempiere Bazaar&quot; community turned from a virtual to a real person for everyone else; nicknames became real names and real faces. This personal exchange between community members lead to a good speed-up in the project development.</p>
<p>To engage everyone in another personal meeting, the 2nd European ADempiere conference will take place in Berlin from June 21st till 23rd.</p>
<p>The conference will focus on technical improvements in ADempiere and on optimizing the social structure of the ADempiere community to be even more successful in terms of development and distribution.</p>
<p>Altogether we'll use the weekend to exchange personal experiences with the software as well as to improve documentation, code and localization – and of course to have a bunch of fun!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Berlin Conference 2014</title>
      <link>https://github.com/adempiere/adempiere-site.github.io/es/about/meeting/berlin-2014.html</link>
      <guid>https://github.com/adempiere/adempiere-site.github.io/es/about/meeting/berlin-2014.html</guid>
      <source url="https://github.com/adempiere/adempiere-site.github.io/rss.xml">Berlin Conference 2014</source>
      <category>Foundation</category>
      <pubDate>Thu, 04 Sep 2014 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="adempiere-world-conference-in-berlin" tabindex="-1"> ADempiere World Conference in Berlin</h1>
<p><strong>September 2nd till 4th of 2014</strong></p>
<p>In May 2007 the 1st European ADempiere conference in Berlin – organized by the German ADempiere association – brought together developers from all over the world.</p>
<p>Gaining from this successful first conference, the &quot;ADempiere Bazaar&quot; community met again for the 2nd European conference in 2009; step by step transforming from a virtual community into a real community.</p>
<p>Starting as only the German ADempiere association, these compelling conferences brought progress, and new members into the community, so that the association got the opportunity to open up and rename to be the &quot;ADempiere association&quot; with international orientation. The next step in bringing together developers from all over the world is not the European Conference, but the World Conference.</p>
<p>Now for the first time in September 2011 the ADempiere World Conference takes place at the Beuth Technical University in Berlin.</p>
<p>The conference tries to bring together every party interested in ADempiere: Community members, service providers, users or people solely interested in ADempiere.</p>
<p>Notable ADempiere developers will be sharing their ADempiere know how in talks or workshops with valuable best practice advice and real world use cases.</p>
<p>We can tell from the quickly increasing number of international participants at the conference that the community was desperately waiting for an event like this.</p>
<p>&quot;The interest and feedback we get for the world conference is just more proof for the global collaboration of community members and the growing network around ADempiere. I'm looking forward to another great experience with this positive and progressive spirit surrounding the community.&quot; – Kai Schaeffer, chairman of the ADempiere association.</p>
<p>Another item on the World Conference agenda is the general assembly of the association and the election of a new chairman.</p>
<p>Of course the weekend will also be used to incorporate social events to get to know each other further and to exchange know how and experiences.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>